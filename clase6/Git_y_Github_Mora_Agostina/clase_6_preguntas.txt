a. ¿Quién inventó el sistema de control de versión Git y por qué?

Git es un sistema de control de versiones distribuido que fue creado por Linus Torvalds en 2005 para ser utilizado en el desarrollo del kernel de Linux. Git es un software escrito en C, con interfaz por lí­nea de comandos, disponible para Windows, MacOS X y GNU/Linux. Originalmente, la comunidad de desarrolladores de Linux utilizaba "BitKeeper", un sistema de control de versiones distribuido y comercial, aunque gratuito para proyectos de código abierto. Como el propio Linus Torvalds explica, BitKeeper suponía un gran paso adelante comparado con otros SCMs como CVS y Subversion y, sin duda, inspiró muchos de los conceptos en los que se basa git (especialmente el ser un sistema distribuido).

Sin embargo, el hecho de ser un software propietario y ciertas desavenencias con su creador, Larry McVoy, llevaron a Linus Torvalds a decantarse por buscar un nuevo sistema de control de versiones. Tras probar muchas de las soluciones existentes y descubrir que ninguna cumplía con sus requisitos, Torvalds decidió diseñar e implementar su propio sistema de control de versiones. Tan sólo un día después ya había desarrollado las bases de git para poder auto-gestionar el propio código de git en git y, una semana después, ya tenía una primera versión. Resulta curioso que en la primera mención pública de git, cuando llevaba un par de días de desarrollo, Torvalds describe git no como un sistema de control de versiones sino simplemente como una herramienta de distribución y archivado de ficheros.

b. ¿A quién pertenece actualmente Github y por qué?

Se ha confirmado que Microsoft compra GitHub. El acuerdo está cerrado, aunque será a finales de año cuando se complete la transacción, que contempla un pago de 7.500 millones de dólares y la reordenación de los actuales directivos de la plataforma.Microsoft ya intentó con su propia plataforma de desarrollo, CodePlex, que terminó cerrando el año pasado dado el relativamente poco impacto que tuvo en comparación con alternativas como la propia GitHub.


c. ¿Hay otra forma que no sea la terminal para trabajar con Github?

Existen Gui gui y Git desktop.

